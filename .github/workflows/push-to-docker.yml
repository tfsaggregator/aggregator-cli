on:
  push:
    paths:
    - '.github/workflows/**'
    - 'src/**'
  pull_request:
    paths:
    - '.github/workflows/**'
    - 'src/**'

env:
  map_os_to_rid: '{"ubuntu-latest":"linux-x64", "windows-latest":"win-x64"}'
  docker_repo: giuliov/aggregator

jobs:

  versioning:
    runs-on: ubuntu-latest
    outputs:
      versionTag: ${{ steps.gitversion.outputs.SemVer  }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v2
    - name: Fetch all history for all tags and branches
      run: git fetch --prune --unshallow
    - name: Install GitVersion
      uses: gittools/actions/gitversion/setup@v0.9.2
      with:
          versionSpec: '5.2.x'
    - name: Use GitVersion
      id: gitversion # step id used as reference for output values
      uses: gittools/actions/gitversion/execute@v0.9.2

  push_image_to_registry:
    runs-on: ${{ matrix.os }}
    needs: versioning
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
    steps:
    - name: Checkout code
      uses: actions/checkout@v2
    - name: Build and push Docker ${{ fromJSON(env.map_os_to_rid)[matrix.os] }} image
      uses: mr-smithers-excellent/docker-build-push@v4
      with:
        image: ${{ env.docker_repo }}
        tag:  ${{ needs.versioning.outputs.versionTag }}-${{ fromJSON(env.map_os_to_rid)[matrix.os] }}
        registry: docker.io
        dockerfile: src/${{ fromJSON(env.map_os_to_rid)[matrix.os] }}.Dockerfile
        directory: src/.
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

  push_manifest_to_registry:
    runs-on: ubuntu-latest
    needs: [versioning, push_image_to_registry]
    steps:
    - run: |
        echo ${{ secrets.DOCKER_PASSWORD }} | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin
        docker manifest create ${{ env.docker_repo }}:latest  --amend ${{ env.docker_repo }}:${{ needs.versioning.outputs.versionTag }}-win-x64  --amend ${{ env.docker_repo }}:${{ needs.versioning.outputs.versionTag }}-linux-x64
        docker manifest push ${{ env.docker_repo }}:latest
        docker manifest create ${{ env.docker_repo }}:${{ needs.versioning.outputs.versionTag }}  --amend ${{ env.docker_repo }}:${{ needs.versioning.outputs.versionTag }}-win-x64  --amend ${{ env.docker_repo }}:${{ needs.versioning.outputs.versionTag }}-linux-x64
        docker manifest push ${{ env.docker_repo }}:${{ needs.versioning.outputs.versionTag }}
      env:
        DOCKER_CLI_EXPERIMENTAL: enabled
